use std::io::{Read, Write};

use atlas_common::error::*;
use atlas_common::serialization_helper::SerType;

/// Marker trait containing the types used by the application,
/// as well as routines to serialize the application data.
///
/// Both clients and replicas should implement this trait,
/// to communicate with each other.
/// This data type must be Send since it will be sent across
/// threads for processing and follow up reception
pub trait ApplicationData: Send + Sync {
    /// Represents the requests forwarded to replicas by the
    /// clients of the BFT system.
    type Request: SerType + 'static;

    /// Represents the replies forwarded to clients by replicas
    /// in the BFT system.
    type Reply: SerType + 'static;

    ///Serialize a request from your service, given the writer to serialize into
    ///  (either for network sending or persistent storing)
    fn serialize_request<W>(w: W, request: &Self::Request) -> Result<()>
    where
        W: Write;

    ///Deserialize a request that was generated by the serialize request function above
    ///  (either for network sending or persistent storing)
    fn deserialize_request<R>(r: R) -> Result<Self::Request>
    where
        R: Read;

    ///Serialize a reply into a given writer
    ///  (either for network sending or persistent storing)
    fn serialize_reply<W>(w: W, reply: &Self::Reply) -> Result<()>
    where
        W: Write;

    ///Deserialize a reply that was generated using the serialize reply function above
    ///  (either for network sending or persistent storing)
    fn deserialize_reply<R>(r: R) -> Result<Self::Reply>
    where
        R: Read;
}
